{"ast":null,"code":"import _classCallCheck from \"/home/juanrodriguez/vue-time-ranges-picker/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/juanrodriguez/vue-time-ranges-picker/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.function.name.js\";\n\nvar MovePointer = /*#__PURE__*/function () {\n  function MovePointer(pointData) {\n    _classCallCheck(this, MovePointer);\n\n    var time = pointData.time,\n        index = pointData.index,\n        controller = pointData.controller,\n        coordinates = pointData.coordinates;\n    this.name = 'point' + index;\n    this.controller = controller;\n    this.time = time;\n    this.coordinates = coordinates;\n    this.index = index;\n    this.isActive = false;\n  }\n\n  _createClass(MovePointer, [{\n    key: \"startMove\",\n    value: function startMove() {\n      this.isActive = true;\n    }\n  }, {\n    key: \"completeMove\",\n    value: function completeMove() {\n      this.isActive = false;\n    }\n  }, {\n    key: \"move\",\n    value: function move(currentX, currentY) {\n      if (this.isDisabled) {\n        return;\n      }\n\n      var _this$controller$basi = this.controller.basicVector,\n          centerX = _this$controller$basi.centerX,\n          centerY = _this$controller$basi.centerY,\n          zeroAngleX = _this$controller$basi.zeroAngleX,\n          zeroAngleY = _this$controller$basi.zeroAngleY,\n          basicVectorLength = _this$controller$basi.vectorLength;\n      var currentVector = [currentX - centerX, currentY - centerY];\n      var scalarMultiple = zeroAngleX * currentVector[0] + zeroAngleY * currentVector[1];\n      var currentVectorLength = Math.sqrt(Math.pow(currentVector[0], 2) + Math.pow(currentVector[1], 2));\n      var angleInRadians = Math.acos(scalarMultiple / (basicVectorLength * currentVectorLength));\n      var angleInDegrees = angleInRadians * 180 / Math.PI;\n\n      if (!angleInDegrees) {\n        return;\n      }\n\n      if (currentY < centerY) {\n        angleInDegrees = 360 - angleInDegrees;\n      }\n\n      this.controller.handlePointerMove(this, angleInDegrees);\n    }\n  }, {\n    key: \"setRef\",\n    value: function setRef(ref) {\n      this.ref = ref;\n    }\n  }]);\n\n  return MovePointer;\n}();\n\nexport default MovePointer;","map":{"version":3,"names":["MovePointer","pointData","time","index","controller","coordinates","name","isActive","currentX","currentY","isDisabled","basicVector","centerX","centerY","zeroAngleX","zeroAngleY","basicVectorLength","vectorLength","currentVector","scalarMultiple","currentVectorLength","Math","sqrt","angleInRadians","acos","angleInDegrees","PI","handlePointerMove","ref"],"sources":["/home/juanrodriguez/vue-time-ranges-picker/src/core/MovePointer.js"],"sourcesContent":["class MovePointer {\n  constructor(pointData) {\n    const { time, index, controller, coordinates } = pointData;\n    this.name = 'point' + index;\n    this.controller = controller;\n    this.time = time;\n    this.coordinates = coordinates;\n    this.index = index;\n    this.isActive = false;\n  }\n\n  startMove() {\n    this.isActive = true;\n  }\n\n  completeMove() {\n    this.isActive = false;\n  }\n\n  move(currentX, currentY) {\n    if (this.isDisabled) {\n      return;\n    }\n\n    const {\n      centerX,\n      centerY,\n      zeroAngleX,\n      zeroAngleY,\n      vectorLength: basicVectorLength,\n    } = this.controller.basicVector;\n\n    const currentVector = [currentX - centerX, currentY - centerY];\n    const scalarMultiple = zeroAngleX * currentVector[0] + zeroAngleY * currentVector[1];\n    const currentVectorLength = Math.sqrt(currentVector[0] ** 2 + currentVector[1] ** 2);\n    const angleInRadians = Math.acos(scalarMultiple / (basicVectorLength * currentVectorLength));\n    let angleInDegrees = (angleInRadians * 180) / Math.PI;\n    if (!angleInDegrees) {\n      return;\n    }\n    if (currentY < centerY) {\n      angleInDegrees = 360 - angleInDegrees;\n    }\n\n    this.controller.handlePointerMove(this, angleInDegrees);\n  }\n\n  setRef(ref) {\n    this.ref = ref;\n  }\n}\n\nexport default MovePointer;\n"],"mappings":";;;;IAAMA,W;EACJ,qBAAYC,SAAZ,EAAuB;IAAA;;IACrB,IAAQC,IAAR,GAAiDD,SAAjD,CAAQC,IAAR;IAAA,IAAcC,KAAd,GAAiDF,SAAjD,CAAcE,KAAd;IAAA,IAAqBC,UAArB,GAAiDH,SAAjD,CAAqBG,UAArB;IAAA,IAAiCC,WAAjC,GAAiDJ,SAAjD,CAAiCI,WAAjC;IACA,KAAKC,IAAL,GAAY,UAAUH,KAAtB;IACA,KAAKC,UAAL,GAAkBA,UAAlB;IACA,KAAKF,IAAL,GAAYA,IAAZ;IACA,KAAKG,WAAL,GAAmBA,WAAnB;IACA,KAAKF,KAAL,GAAaA,KAAb;IACA,KAAKI,QAAL,GAAgB,KAAhB;EACD;;;;WAED,qBAAY;MACV,KAAKA,QAAL,GAAgB,IAAhB;IACD;;;WAED,wBAAe;MACb,KAAKA,QAAL,GAAgB,KAAhB;IACD;;;WAED,cAAKC,QAAL,EAAeC,QAAf,EAAyB;MACvB,IAAI,KAAKC,UAAT,EAAqB;QACnB;MACD;;MAED,4BAMI,KAAKN,UAAL,CAAgBO,WANpB;MAAA,IACEC,OADF,yBACEA,OADF;MAAA,IAEEC,OAFF,yBAEEA,OAFF;MAAA,IAGEC,UAHF,yBAGEA,UAHF;MAAA,IAIEC,UAJF,yBAIEA,UAJF;MAAA,IAKgBC,iBALhB,yBAKEC,YALF;MAQA,IAAMC,aAAa,GAAG,CAACV,QAAQ,GAAGI,OAAZ,EAAqBH,QAAQ,GAAGI,OAAhC,CAAtB;MACA,IAAMM,cAAc,GAAGL,UAAU,GAAGI,aAAa,CAAC,CAAD,CAA1B,GAAgCH,UAAU,GAAGG,aAAa,CAAC,CAAD,CAAjF;MACA,IAAME,mBAAmB,GAAGC,IAAI,CAACC,IAAL,CAAU,SAAAJ,aAAa,CAAC,CAAD,CAAb,EAAoB,CAApB,aAAwBA,aAAa,CAAC,CAAD,CAArC,EAA4C,CAA5C,CAAV,CAA5B;MACA,IAAMK,cAAc,GAAGF,IAAI,CAACG,IAAL,CAAUL,cAAc,IAAIH,iBAAiB,GAAGI,mBAAxB,CAAxB,CAAvB;MACA,IAAIK,cAAc,GAAIF,cAAc,GAAG,GAAlB,GAAyBF,IAAI,CAACK,EAAnD;;MACA,IAAI,CAACD,cAAL,EAAqB;QACnB;MACD;;MACD,IAAIhB,QAAQ,GAAGI,OAAf,EAAwB;QACtBY,cAAc,GAAG,MAAMA,cAAvB;MACD;;MAED,KAAKrB,UAAL,CAAgBuB,iBAAhB,CAAkC,IAAlC,EAAwCF,cAAxC;IACD;;;WAED,gBAAOG,GAAP,EAAY;MACV,KAAKA,GAAL,GAAWA,GAAX;IACD;;;;;;AAGH,eAAe5B,WAAf"},"metadata":{},"sourceType":"module"}